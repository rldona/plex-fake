{"version":3,"sources":["components/movie-item/movie-item.js","components/movie-list/movie-list.js","components/serie-list/serie-list.js","components/movie-detail/movie-detail.js","App.js","serviceWorker.js","index.js"],"names":["MovieItem","id","this","props","history","movie","push","pathname","state","className","parseInt","ratingAvergae","viewCount","onClick","navigateTo","_id","src","thumbnail","alt","title","ratingCount","Component","withRouter","MovieList","fetchMovieList","movieList","fetch","then","response","json","movies","setState","newList","concat","data","loadMoreMovies","page","length","map","i","key","SerieList","fetchSerieList","serieList","series","fetchserieList","serie","MovieDetail","location","divStyle","backgroundImage","style","sinopsis","reviewList","review","evaluation","body","author","App","exact","path","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6fca34ca.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport { withRouter } from 'react-router-dom'\n\nclass MovieItem extends Component {\n  navigateTo(id) {\n    const { history, movie } = this.props;\n    history.push({ pathname:`/movie-detail/${id}`, state: { movie: movie } });\n  }\n\n  render() {\n    const { movie } = this.props;\n\n    if (!movie) return null;\n\n    return (\n      <div className={`item ${parseInt(movie.ratingAvergae) >= 5 ? (parseInt(movie.ratingAvergae) >= 6 ? 'positiva' : 'neutral') : 'negativa'} ${movie.viewCount ? 'viewed' : ''}`} onClick={() => this.navigateTo(movie._id)}>\n        <img src={movie.thumbnail} alt={movie.title} />\n        <ul>\n          <li>{movie.ratingAvergae}</li>\n          <li>{movie.ratingCount}</li>\n        </ul>\n        <h2>{movie.title}</h2>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(MovieItem);\n","import React, { Component } from 'react';\n\nimport MovieItem from '../movie-item/movie-item';\n\nclass MovieList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      movieList: [],\n      // type: 'movies',\n      // page: 1,\n      // size: 50\n    };\n  }\n\n  componentDidMount() {\n    this.fetchMovieList();\n  }\n\n  fetchMovieList = () => {\n    const {\n      movieList,\n      // type,\n      // page,\n      // size\n    } = this.state;\n\n    const type = 'movies';\n\n    // fetch(`https://plex-fake-server.herokuapp.com/movies?type=${type}&page=${page}&size=${size}`)\n    fetch(`http://localhost:3000/${type}`)\n      .then(response => response.json())\n      .then(movies => {\n        this.setState(state => {\n          const newList = movieList.concat(movies.data);\n          return {\n            ...this.state,\n            movieList: newList\n          };\n        });\n      });\n  }\n\n  loadMoreMovies = () => {\n    this.setState({ page: this.state.page + 1 });\n    this.fetchMovieList();\n  }\n\n  render() {\n    const { movieList } = this.state;\n\n    if (movieList.length === 0) {\n      return null;\n    }\n\n    return (\n      <div>\n        <div className=\"movie-list\">\n          {\n            movieList.map((movie, i) => {\n              return <MovieItem key={i} movie={movie} />;\n            })\n          }\n        </div>\n        <button className=\"load-more\" onClick={() => this.loadMoreMovies()}>Cargar más...</button>\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React, { Component } from 'react';\n\nimport MovieItem from '../movie-item/movie-item';\n\nclass SerieList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      serieList: []\n    };\n  }\n\n  componentDidMount() {\n    this.fetchSerieList();\n  }\n\n  fetchSerieList = () => {\n    const {\n      serieList\n    } = this.state;\n\n    const type = 'series';\n\n    fetch(`http://localhost:3000/${type}`)\n      .then(response => response.json())\n      .then(series => {\n        this.setState(state => {\n          const newList = serieList.concat(series.data);\n          return {\n            ...this.state,\n            serieList: newList\n          };\n        });\n      });\n  }\n\n  loadMoreMovies = () => {\n    this.setState({ page: this.state.page + 1 });\n    this.fetchserieList();\n  }\n\n  render() {\n    const { serieList } = this.state;\n\n    if (serieList.length === 0) {\n      return null;\n    }\n\n    return (\n      <div>\n        <div className=\"movie-list\">\n          {\n            serieList.map((serie, i) => {\n              return <MovieItem key={i} movie={serie} />;\n            })\n          }\n        </div>\n        <button className=\"load-more\" onClick={() => this.loadMoreMovies()}>Cargar más...</button>\n      </div>\n    );\n  }\n}\n\nexport default SerieList;\n","import React, { Component } from 'react';\n\nimport { withRouter } from 'react-router-dom'\n\nclass MovieDetail extends Component {\n  render() {\n    const { location: { state: { movie } } } = this.props;\n\n    if (!movie) return null;\n\n    var divStyle = {\n      backgroundImage: 'url(' + movie.thumbnail + ')'\n    };\n\n    return (\n      <div className=\"movie-detail\">\n        <div className=\"thunbnail\" style={divStyle}></div>\n        <ul className=\"rating\">\n          <li className={`${parseInt(movie.ratingAvergae) >= 5 ? (parseInt(movie.ratingAvergae) >= 6 ? 'positiva' : 'neutral') : 'negativa'}`}>{movie.ratingAvergae}</li>\n          <li>{movie.ratingCount}</li>\n        </ul>\n        <h2>{movie.title}</h2>\n        <p>{movie.sinopsis}</p>\n        <h3>Criticas profesionales:</h3>\n        <div className=\"review-list\">\n          {\n            movie.reviewList.map((review, i) => {\n              return (\n                <div className={`review-item ${review.evaluation}`} key={i}>\n                  <p className=\"body\">{review.body}</p>\n                  <p>({review.author})</p>\n                </div>\n              );\n            })\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(MovieDetail);\n","import React from 'react';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport './App.css';\n\nimport MovieList from './components/movie-list/movie-list';\nimport SerieList from './components/serie-list/serie-list';\nimport MovieDetail from './components/movie-detail/movie-detail';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <MovieList />\n        </Route>\n        <Route exact path=\"/movie-list\">\n          <MovieList />\n        </Route>\n        <Route exact path=\"/serie-list\">\n          <SerieList />\n        </Route>\n        <Route path=\"/movie-detail/:id\">\n          <MovieDetail />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}